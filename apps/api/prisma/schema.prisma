generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  BUYER
  EVENT_ORGANIZER
}

enum Provider {
  CREDENTIALS
  GOOGLE
  GITHUB
}

model User {
  id            Int           @id @default(autoincrement())
  name          String
  email         String        @unique
  password      String?
  provider      Provider      @default(CREDENTIALS)
  emailVerified Boolean       @default(false)
  image         String?
  token         String?       @unique
  role          Role
  referralCode  String        @unique
  points        Int           @default(0)
  coupons       Coupon[]
  transactions  Transaction[]
  events        Event[]       @relation("EventUser")
  organizedEvents Event[]     @relation("EventOrganizer")
  reviews       Review[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  Attendee      Attendee[]
  Referral      Referral[]
  samples       Sample[]
  userRewards   UserReward[]
  Point         Point[]

  @@map("users")
}

model Point {
  id        Int      @id @default(autoincrement())
  total     Int      @default(0)
  expDate   DateTime @default(now())
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int      
  user      User     @relation(fields: [userId], references: [id])

  @@map("points")
}

model Reward {
  id          Int          @id @default(autoincrement())
  code        String       @unique
  expDate     DateTime
  quota       Int
  claimed     Int          @default(0)
  isDeleted   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userRewards UserReward[]

  @@map("rewards")
}

model UserReward {
  id       Int              @id @default(autoincrement())
  userId   Int
  rewardId Int
  status   UserRewardStatus
  user     User             @relation(fields: [userId], references: [id])
  reward   Reward           @relation(fields: [rewardId], references: [id])
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("user_rewards")
}

enum UserRewardStatus {
  NEW
  DONE
}

model Review {
  id        Int      @id @default(autoincrement())
  userid    Int      @unique
  eventid   Int
  comment   String
  rating    Int
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  user  User  @relation(fields: [userid], references: [id])
  event Event @relation(fields: [eventid], references: [id])

  @@map("reviews")
}

model Event {
  id           Int           @id @default(autoincrement())
  userid       Int
  categoryid   Int
  name         String
  thumbnail    String
  title        String
  description  String
  location     String
  startDate    DateTime
  endDate      Int
  price        Int
  discount     Int           @default(0)
  quota        Int
  booked       Int           @default(0)
  isDeleted    Boolean       @default(false)
  organizer    User          @relation("EventOrganizer", fields: [organizerId], references: [id])
  organizerId  Int
  vouchers     Voucher[]
  transactions Transaction[]
  attendees    Attendee[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())

  user     User     @relation("EventUser", fields: [userid], references: [id])
  category Category @relation(fields: [categoryid], references: [id])
  reviews  Review[]

  @@map("events")
}

model Category {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]

  @@map("categories")
}

model Voucher {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  discount  Int
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("vouchers")
}

model Coupon {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  discount  Int
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("coupons")
}

model Transaction {
  id           Int       @id @default(autoincrement())
  status       String
  payment      Int
  userId       Int
  eventId      Int
  paymentProof String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id])
  event        Event?     @relation(fields: [eventId], references: [id])
  Payment      Payment[]

  @@map("transactions")
}

model Payment {
  id           Int         @id @default(autoincrement())
  amount       Int
  transaction  Transaction @relation(fields: [id], references: [id])

  @@map("payments")
}

model Attendee {
  id             Int      @id @default(autoincrement())
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
  eventId        Int
  event          Event    @relation(fields: [eventId], references: [id])
  ticketQuantity Int
  totalPrice     Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  @@map("attendees")
}

model Referral {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  referralCode String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  @@map("referrals")
}

enum PaymentMethod {
  MANDIRI
  BCA
  PERMATA
  JAGO
}

enum TransactionStatus {
  PENDING
  ACCEPTED
  WAITING_FOR_PAYMENT
  WAITING_FOR_ADMIN_CONFIRMATION
  DONE
  TERMINATE
  REJECTED
  EXPIRED
}

model Sample {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@map("samples")
}